git笔记

git init创建仓库

git add 文件名 --提交文件

git commit -m "提交说明"

git status --查看工作区状态，文件是否被修改

git diff 文件名  --查看修改的内容

git log --显示从最近到最远的提交历史

git log --pretty=oneline

git版本回退
git reset --hard HEAD^

上一个版本是HEAD^
上上一个版本是HEAD^^
回退到第一百个是HEAD~100

git reflog --查看命令历史

git diff    #是工作区(work dict)和暂存区(stage)的比较
git diff --cached    #是暂存区(stage)和分支(master)的比较

git diff HEAD -- 文件名

git checkout -- 文件名 --工作区的修改全部撤销

git reset HEAD 文件名 --可以把暂存区的修改撤销掉

rm 文件名 --删除文件 (从文件管理器中删除，但在版本库里面还有)

从版本库删除文件

git rm 文件名
git commit -m ""
还有提交

ssh-keygen -t rsa -C "youremail@example.com"
链接远程仓库要用到的key

git remote add origin https://github.com/ldjdezh/html.git

git push -u origin master

git push --实际上是把当前分支master推送到远程

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

git clone https://github.com/ldjdezh/JavaStudy.git

我们创建dev分支，然后切换到dev分支
git checkout -b dev

等同于

git branch dev
git checkout dev

git branch --查看当前分支

git merge dev  --把dev分支的工作成果合并到master分支上

git branch -d dev --切换并删除dev分支

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

git merge --no-ff -m "merge with no-ff" dev
准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward
在合并后有一个commit

git stash --可以把当前工作现场“储藏”起来

git stash list --查看工作现场

git stash pop --恢复工作现场的同时把stash内容也删了

git stash apply --恢复，但是恢复后，stash内容并不删除

git stash drop --来删除

git stash apply stash@{0} --指定恢复的现场

git branch -D 分支名 --强制删除

git remote --查看远程库的信息

git remote -v --显示更详细的信息

git push origin master --推送分支
origin 远程库名字
master 本地分支

git branch --set-upstream dev origin/dev
指定本地dev分支与远程origin/dev分支的链接

git branch --set-upstream branch-name origin/branch-name

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

git tag v1.0 --打标签
git tag <name>

git tag --查看所有标签

git log --pretty=oneline --abbrev-commit

git tag v0.9 6224937 --打标签的另一种方式

git show <tagname> --查看标签信息
git show v0.9

git tag -a v0.1 -m "version 0.1 released" 3628164
--用-a指定标签名，-m指定说明文字

git tag -s v0.2 -m "signed version 0.2 released" fec145a
--通过-s用私钥签名一个标签


命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签。


git tag -d v0.1 --删除标签

git push origin v1.0 --把标签推送到远程

git push origin --tags 
--一次性推送所有标签

git push origin :refs/tags/v0.9 
--远程删除标签


命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

rm -rf .git --删除仓库

git remote remove <name> --删除remote

git pull --rebase origin master
--从远程下载文件并合并











